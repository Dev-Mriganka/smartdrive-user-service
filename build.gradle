plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.smartdrive'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
    targetCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', '2025.0.0')
    set('lombokVersion', '1.18.30')
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        // BOM for Spring Cloud AWS
        mavenBom "io.awspring.cloud:spring-cloud-aws-dependencies:3.4.0"
        // BOM for the low-level AWS SDK
        mavenBom "software.amazon.awssdk:bom:2.27.21"
    }
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation('org.springframework.boot:spring-boot-starter-data-jpa') {
        exclude group: 'org.flywaydb', module: 'flyway-core'  // Exclude Flyway completely
    }
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    
    // Service Discovery
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    
    // Database
    runtimeOnly 'org.postgresql:postgresql'
    
    // AWS SQS for event-driven communication
    implementation 'io.awspring.cloud:spring-cloud-aws-starter-sqs'
    
    // Monitoring
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-tracing-bridge-otel'
    implementation "io.opentelemetry:opentelemetry-exporter-otlp"
    implementation 'io.micrometer:micrometer-registry-prometheus'
    
    // Logging
    implementation 'net.logstash.logback:logstash-logback-encoder:7.4'
    
    // Swagger/OpenAPI Documentation
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.9'
    
    // Lombok
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    
    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    
    // Test Lombok
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += [
        '-parameters',
        '-Xlint:unchecked',
        '-Xlint:deprecation'
    ]
    
    options.annotationProcessorPath = configurations.annotationProcessor
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.register('cleanLombok') {
    doLast {
        delete fileTree(dir: 'build/generated', include: '**/*')
        delete fileTree(dir: '.gradle', include: '**/generated/**')
    }
}

clean.dependsOn cleanLombok